import { Component, OnInit, ViewChild } from '@angular/core';
import {QbIntegrationService} from 'app/services/qb-integration/qb-integration.service';
import DataSource from 'devextreme/data/data_source';
import CustomStore from 'devextreme/data/custom_store';
import {CommonService} from 'app/services/common/common.service';
import {Subject} from 'rxjs';
import {PayrollService} from 'app/services/payroll/payroll.service';
import {DxFormComponent} from 'devextreme-angular';
import {SwalService} from 'app/services/swal.service';

@Component({
  selector: 'app-update-qb-status',
  templateUrl: './update-qb-status.component.html',
  styleUrls: ['./update-qb-status.component.scss']
})
export class UpdateQbStatusComponent implements OnInit {

    @ViewChild('dxParentItemAddForm') dxParentItemAddForm: DxFormComponent;
    showForm = false;
    newParentItemPopUp = false;
    newParentIncomePopUp = false;
    newParentExpenseopUp = false;
    newParentCustomerPopUp = false;
    newParentVendorPopUp = false;
    currentHighestw2AccNum = '';
    currentHighestC2CAccNum = '';
    applyFilter = false;
    qbFilterForm: any = {};
    filterData: any = [];
    payrollFilterValueMain: any = {
        status: []
    };
    payrollFilterValues: any = {
        period_type: [
            {
                id: 'W',
                name: 'Weekly'
            },
            {
                id: 'S',
                name: 'Semi Monthly'
            },
            {
                id: 'B',
                name: 'Bi Weekly'
            }
        ],
        // period: ['This', 'Last', 'Next', 'Custom', 'Last Month', 'This Month'],
        period: [],
        radio_type: ['All', 'New', 'Term'],
        client: ['Allclient', 'Newcleint', 'Termclient'],
        client_type: [
            {
                name: 'All',
                value: 0
            },
            {
                name: 'W2',
                value: 200001
            },
            {
                name: 'C2C',
                value: 200003
            },
            {
                name: 'IC',
                value: 200002
            }
        ]
    };
    payrollDataFilter: any = {
        status: 0
    };
    itemsDataSource: any = {};
    selectedRecord: any = {};
    newConsultantObj: any = {
        consultantList: [],
        newConsultantName: '',
        consultantId: '',
        selectedItem: {},
    };
    newCustomerObj: any = {
        consultantList: [],
        newConsultantName: '',
        selectedItem: {},
    };
    newIncomeAccountObj: any = {
        consultantList: [],
        newConsultantName: '',
        selectedItem: {},
    };
    newExpenseAccountObj: any = {
        consultantList: [],
        newConsultantName: '',
        selectedItem: {},
    };
    newVendorsObj: any = {
        consultantList: [],
        newConsultantName: '',
        selectedItem: {},
    };
    notFullTimeAmountObj: any = {
        billRate: 0,
        payRate: 0,
        discount: 0
    };
    fullTimeAmountObj: any = {
        salary: 0,
        feePercent: 0,
        feeAmount: 0
    };
    qbConsultantsNames: any = [];
    consultantNames: any = [];
    listdata: any = {};
    messages: any = [];
    newItemPopupData = {
        frmFullName: ''
    };
    newIncomePopupData = {
        frmFullName: ''
    };
    newExpensePopupData = {
        frmFullName: ''
    };
    newCustomerPopupData = {
        frmFullName: ''
    };
    newVendorPopupData = {
        frmFullName: ''
    };
    parentCompanies: DataSource;
    private unsubscribe$: Subject<void> = new Subject<void>();

    constructor(private qbIntegrationService: QbIntegrationService,
                private payrollService: PayrollService,
                private commonService: CommonService,
                private swalService: SwalService) {

        this.payrollFilterValueMain = {
            status: ['All', 'New', 'Saved']
        };

        this.listdata = {
            itemList: [],
            incomeAccountList: [],
            expenseAccountList: [],
            customerList: [],
            vendorList: []
        };

        this.addCustomClientName = this.addCustomClientName.bind(this);
        this.filterConsultantName = this.filterConsultantName.bind(this);
        // this.changeInDbFilter = this.changeInDbFilter.bind(this);
        // this.changeInQbFilter = this.changeInQbFilter.bind(this);
        // this.changeNotInQbFilter = this.changeNotInQbFilter.bind(this);
    }

    ngOnInit() {
        this.showForm = false;

        // Get the all consultant list
        this.fetchGridData();
        this.qbFilterForm = {
            frmInDB: false,
            frmNotInQB: false,
            frmInQB: false
        };

        this.newConsultantObj.consultantList = new DataSource({
            store: new CustomStore({
                key: 'FullName',
                load: (loadOptions) => {
                    if (!loadOptions.searchValue) {
                        return [];
                    }
                    return this.qbIntegrationService.getItemsSearchQb(loadOptions.searchValue)
                        .toPromise()
                        .then(response => {
                            // this.newConsultantObj.consultantList = [];
                            // Here, you can perform operations unsupported by the server
                            return response && response[0] ? response : [];
                        });
                },
                byKey: (key) => {
                    if (!key) {
                        return [];
                    }
                    return this.qbIntegrationService.getQbItemByName(key)
                        .toPromise()
                        .then((response: any) => {
                            const result = response && response.length > 0 ? response[0] : null;
                            if (result) {
                                this.newConsultantObj.selectedItem = result;
                                this.newConsultantObj.client = result.FullName;
                            }
                            return result;
                        }).catch(err => console.log(err));

                }
            })
        });

        this.newCustomerObj.consultantList = new DataSource({
            store: new CustomStore({
                key: 'FullName',
                load: (loadOptions) => {

                    if (!loadOptions.searchValue) {
                        return [];
                    }
                    return this.qbIntegrationService.getCustomerSearchQb(loadOptions.searchValue)
                        .toPromise()
                        .then(response => {
                            // Here, you can perform operations unsupported by the server
                            return response && response[0] ? response : [];
                        });
                },
                byKey: (key) => {
                    if (!key) {
                        return [];
                    }
                    return this.qbIntegrationService.getCustomerByName(key)
                        .toPromise()
                        .then((response: any) => {
                            const result = response && response.length > 0 ? response[0] : null;
                            if (result) {
                                this.newCustomerObj.selectedItem = result;
                                this.newCustomerObj.client = result.FullName;
                            }
                            return result;
                        }).catch(err => console.log(err));

                }
            })
        });

        this.newIncomeAccountObj.consultantList = new DataSource({
            store: new CustomStore({
                key: 'full_name',
                load: (loadOptions) => {

                    if (!loadOptions.searchValue) {
                        return [];
                    }
                    return this.qbIntegrationService.getIncomeAccountSearchQb(loadOptions.searchValue)
                        .toPromise()
                        .then(response => {
                            // Here, you can perform operations unsupported by the server
                            return response && response[0] ? response : [];
                        });
                },
                byKey: (key) => {
                    if (!key) {
                        return [];
                    }
                    return this.qbIntegrationService.getAccountByName(key, 'Income')
                        .toPromise()
                        .then((response: any) => {

                            const result = response && response.length > 0 ? response[0] : null;
                            if (result) {
                                this.newIncomeAccountObj.selectedItem = result;
                                this.newIncomeAccountObj.client = result.full_name;
                            }
                            return result;
                        }).catch(err => console.log(err));

                }
            })
        });

        this.newExpenseAccountObj.consultantList = new DataSource({
            store: new CustomStore({
                key: 'ID',
                load: (loadOptions) => {

                    if (!loadOptions.searchValue) {
                        return [];
                    }
                    return this.qbIntegrationService.getExpenseAccountSearchQb(loadOptions.searchValue)
                        .toPromise()
                        .then(response => {
                            // Here, you can perform operations unsupported by the server
                            return response && response[0] ? response : [];
                        });
                },
                byKey: (key) => {
                    if (!key) {
                        return [];
                    }
                    return this.qbIntegrationService.getAccountByName(key, 'CostOfGoodsSold')
                        .toPromise()
                        .then((response: any) => {

                            const result = response && response.length > 0 ? response[0] : null;
                            if (result) {
                                this.newExpenseAccountObj.selectedItem = result;
                                this.newExpenseAccountObj.client = result.full_name;
                            }
                            return result;
                        }).catch(err => console.log(err));
                }
            })
        });

        this.newVendorsObj.consultantList = new DataSource({
            store: new CustomStore({
                key: 'Name',
                load: (loadOptions) => {

                    if (!loadOptions.searchValue) {
                        return [];
                    }
                    return this.qbIntegrationService.getVendorSearchQb(loadOptions.searchValue)
                        .toPromise()
                        .then(response => {
                            // Here, you can perform operations unsupported by the server
                            return response && response[0] ? response : [];
                        });
                },
                byKey: (key) => {
                    if (!key) {
                        return [];
                    }
                    return this.qbIntegrationService.getVendorSearchQb(key)
                        .toPromise()
                        .then((response: any) => {

                            const result = response && response.length > 0 ? response[0] : null;
                            if (result) {
                                this.newVendorsObj.selectedItem = result;
                                this.newVendorsObj.client = result.Name;
                            }
                            return result;
                        }).catch(err => console.log(err));
                }
            })
        });

        this.commonService.getBusinessEntityDetails('clients')
            .subscribe((data: any) => {
                console.log('client data==>', data);
                //  if (data['code'] != '200' || data['data'].length <= 0) {
                this.payrollFilterValues.client = data.data || null;
                // return false;
            });

        this.getC2CHighestAccountNumber();
        this.getW2HighestAccountNumber();
    }

    // changeInDbFilter($event) {
    //     this.qbFilterForm.frmInDB = $event.value;
    //     console.log('this.qbFilterForm.frmInDB', this.qbFilterForm.frmInDB);
    //     this.filterConsultantName();
    // }
    // changeNotInQbFilter($event) {
    //     this.qbFilterForm.frmNotInQB = $event.value;
    //     console.log('this.qbFilterForm.frmNotInQB', this.qbFilterForm.frmNotInQB);
    //     this.filterConsultantName();
    // }
    // changeInQbFilter($event) {
    //     this.qbFilterForm.frmInQB = $event.value;
    //     console.log('this.qbFilterForm.frmInQB', this.qbFilterForm.frmInQB);
    //     this.filterConsultantName();
    // }


    onSelectionChanged($event) {
        console.log($event);
    }

    loadData(event: any) {
        const itemRecord = event.itemData;
        this.commonService.showLoadPanel.next(true);
        this.messages = [];
        this.showForm = true;
        console.log(itemRecord);
        this.newConsultantObj.newConsultantName = itemRecord.ItemName;
        this.newConsultantObj.client = itemRecord.Client + (itemRecord.QBReffID ? ':' + itemRecord.ItemName : '');
        this.newConsultantObj.consultantId = itemRecord.ConsultantID;

        this.newCustomerObj.client = itemRecord.Client + (itemRecord.QBReffID ? ':' + itemRecord.ItemName : '');
        this.newCustomerObj.newConsultantName = itemRecord.ItemName;

        this.newIncomeAccountObj.newConsultantName = itemRecord.ItemName;
        this.newIncomeAccountObj.client = `Services:Consulting Services:${itemRecord.Client}` + (itemRecord.QBReffID ? `:${itemRecord.ItemName}` : '');

        this.newExpenseAccountObj.newConsultantName = itemRecord.ItemName;
        const expenseAccount = itemRecord.CandidateType === 'W2' ? 'W2 Consultants' : 'Cost of Goods Sold:Consulting Services - Expense';
        this.newExpenseAccountObj.client = itemRecord.QBReffID ? `${itemRecord.ItemName}` : `${expenseAccount}`;

        this.newVendorsObj.newConsultantName = itemRecord.ItemName;
        this.newVendorsObj.client = itemRecord.CompanyName;
        this.selectedRecord = itemRecord;

        if (itemRecord.CandidateType !== 'Full Time') {
            this.notFullTimeAmountObj.billRate = itemRecord.SalesPrice;
            this.notFullTimeAmountObj.payRate = itemRecord.pnl_loaded_pay_rate;
            this.notFullTimeAmountObj.discount = itemRecord.ClientDiscount;
        } else {
            this.fullTimeAmountObj.salary = itemRecord.fulltime_salary;
            this.fullTimeAmountObj.feePercent = itemRecord.fulltime_fees_percentage;
            this.fullTimeAmountObj.feeAmount = itemRecord.fulltime_fees_amount;
        }
        setTimeout(() => {
            this.commonService.showLoadPanel.next(false);
        }, 1500);
        // this.newConsultantObj.consultantList.reload();
    }

    fetchGridData() {
        const searchData = {
            p_status_filter: 1
        };
        console.log(this.payrollFilterValueMain);
        console.log(this.payrollDataFilter);

        switch (this.payrollDataFilter.status) {
            case 'All':
                searchData.p_status_filter = 5;
                break;
            case 'New':
                searchData.p_status_filter = 1;
                break;
            case 'Saved':
                searchData.p_status_filter = 2;
                break;
        }


        this.qbIntegrationService.getAllCandidate(searchData).subscribe((data) => {
            console.log('All Candidates==>', data);
            this.consultantNames = data[0];
        });

        /*this.qbIntegrationService.getCandidateSemimonthly(searchData).subscribe((data) => {
            console.log('Semi monthly data==>', data[0]);
            this.consultantNames = data[0];
            console.log('consultantNames==>', this.consultantNames);
        });*/
    }

    filterConsultantName() {
        this.filterData = [];
        this.applyFilter = false;
        if (this.qbFilterForm.frmInQB) {
            this.applyFilter = true;
            console.log('this.consultantNames', this.consultantNames);
            this.consultantNames.map(item => {
                if (item.QBReffID) {
                    this.filterData.push(item);
                }
            });
        }
        if (this.qbFilterForm.frmNotInQB) {
            this.applyFilter = true;
            console.log('this.consultantNames', this.consultantNames);
            this.consultantNames.map(item => {
                if (!item.QBReffID) {
                    this.filterData.push(item);
                }
            });
        }
        console.log('filterData', this.filterData);

    }

    saveCandidate(e) {
        e.preventDefault();
        this.messages = [];
        let isvalidate = false;

        console.log(this.newConsultantObj);
        console.log(this.newCustomerObj);
        console.log(this.newIncomeAccountObj);
        console.log(this.newExpenseAccountObj);
        console.log(this.newVendorsObj);
        console.log(this.selectedRecord);
        console.log(this.notFullTimeAmountObj);
        console.log(this.fullTimeAmountObj);

        // Validate the Form Start
        if (this.selectedRecord['CandidateType'] == 'W2') {
            isvalidate = !(this.newConsultantObj.client || this.newCustomerObj.client || this.newIncomeAccountObj.client || this.newExpenseAccountObj.client);

            isvalidate = !(this.newConsultantObj.newConsultantName || this.newCustomerObj.newConsultantName || this.newIncomeAccountObj.newConsultantName || this.newExpenseAccountObj.newConsultantName);
        } else if (this.selectedRecord['CandidateType'] == 'C2C' || this.selectedRecord['CandidateType'] == 'IC') {
            isvalidate = !(this.newConsultantObj.client || this.newCustomerObj.client || this.newIncomeAccountObj.client || this.newExpenseAccountObj.client || this.newVendorsObj.client);

            isvalidate = !(this.newConsultantObj.newConsultantName || this.newCustomerObj.newConsultantName || this.newIncomeAccountObj.newConsultantName || this.newExpenseAccountObj.newConsultantName);
        } else if (this.selectedRecord['CandidateType'] == 'Full Time') {
            isvalidate = !(this.newConsultantObj.client || this.newCustomerObj.client || this.newIncomeAccountObj.client);

            isvalidate = !(this.newConsultantObj.newConsultantName || this.newCustomerObj.newConsultantName || this.newIncomeAccountObj.newConsultantName);
        }

        if (isvalidate) {
            const swalData = {
                title: 'Validation',
                message: 'Please fill all the fields.',
                type: 'error',
                info: 'All fields are mandatory.'
            };

            this.swalService.warn(swalData);
            return false;
        }
        // Validate the Form End

        // Questions: Are you going to change the name of new client. To filter in the list.
        // If yes: Then match with ConsultantId
        // Get the name from text box.
        const itemSelected: any = this.consultantNames.filter((item) => {
            if (item.ConsultantID == this.newConsultantObj.consultantId) {
                return item;
            }
        });

        const parentClient: any = this.newConsultantObj.selectedItem;
        // this.newConsultantObj.consultantList._items.filter((item) => {
        //     if (item.FullName == this.newConsultantObj.client) {
        //         return item;
        //     }
        // });

        const parentCustomer: any = this.newCustomerObj.selectedItem;
        // this.newCustomerObj.consultantList._items.filter((item) => {
        //     if (item.FullName == this.newCustomerObj.client) {
        //         return item;
        //     }
        // });

        const parentIncomeAccount: any = this.newIncomeAccountObj.selectedItem;
        // this.newIncomeAccountObj.consultantList._items.filter((item) => {
        //     if (item.full_name == this.newIncomeAccountObj.client) {
        //         return item;
        //     }
        // });

        const parentExpenseAccount: any = this.newExpenseAccountObj.selectedItem;
        // this.newExpenseAccountObj.consultantList._items.filter((item) => {
        //     if (item.full_name == this.newExpenseAccountObj.client) {
        //         return item;
        //     }
        // });

        const parentVendor: any = this.newVendorsObj.selectedItem;
        // this.newVendorsObj.consultantList._items.filter((item) => {
        //     if (item.Name == this.newVendorsObj.client) {
        //         return item;
        //     }
        // });
        // return ;
        // Handle the condition, if parent list is empty.
        if (this.selectedRecord != {}) {
            // console.log(this.consultantNames[this.selectedIndex]);
            console.log('item Selected ==>', itemSelected);
            console.log('Parent client ==>', parentClient);
            console.log('parentCustomer ==>', parentCustomer);
            console.log('parentIncomeAccount ==>', parentIncomeAccount);
            console.log('parentExpenseAccount ==>', parentExpenseAccount);
            console.log('parentVendor ==>', parentVendor);

            const CandidateType = this.selectedRecord['CandidateType'] != '' ? this.selectedRecord['CandidateType'] : '';
            /* CREATE ACCOUNT DATA */
            let parentIncomeNumberTemp = '';
            let childIncomeAccountNumberTemp = '';
            let isIncomeParentNew = false;
            let parentExpenseNumberTemp = '';
            let childExpenseAccountNumberTemp = '';
            let isExpenseParentNew = false;
            debugger;
            if (parentIncomeAccount && !parentIncomeAccount['listid']) {
                parentIncomeNumberTemp = parentIncomeAccount['account_number'];
                childIncomeAccountNumberTemp = parentIncomeAccount['account_number'].slice(0, 2).toUpperCase();
                isIncomeParentNew = false;
            } else {

                if (parentIncomeAccount['qb_status'] == 'temp' && parentIncomeAccount['relation_type'] == 'parent') {
                    parentIncomeNumberTemp = parentIncomeAccount['full_name'].slice(0, 2).toUpperCase();
                    childIncomeAccountNumberTemp = parentIncomeAccount['full_name'].slice(0, 2).toUpperCase();
                    isIncomeParentNew = true;
                } else {
                    parentIncomeNumberTemp = parentIncomeAccount['full_name'].slice(0, 2).toUpperCase();
                    childIncomeAccountNumberTemp = parentIncomeAccount['full_name'].slice(0, 2).toUpperCase();
                    isIncomeParentNew = false;
                }

            }

            if (parentExpenseAccount['listid'] != null && parentExpenseAccount['listid'] != '') {
                isExpenseParentNew = false;
                parentExpenseNumberTemp = parentExpenseAccount['account_number'];
                switch (CandidateType) {
                    case 'W2':
                        childExpenseAccountNumberTemp = this.currentHighestw2AccNum ? String(+this.currentHighestw2AccNum.substr(2) + 1) : '1';
                        childExpenseAccountNumberTemp = 'W2' + childExpenseAccountNumberTemp;
                        break;
                    case 'C2C':
                        childExpenseAccountNumberTemp = this.currentHighestC2CAccNum ? String(+this.currentHighestC2CAccNum.substr(2) + 1) : '1';
                        childExpenseAccountNumberTemp = 'CC' + childExpenseAccountNumberTemp;
                        break;
                    default:
                        break;
                }
            } else {
                switch (CandidateType) {
                    case 'W2':
                        parentExpenseNumberTemp = this.currentHighestw2AccNum ? String(+this.currentHighestw2AccNum.substr(2) + 1) : '1';
                        parentExpenseNumberTemp = 'W2' + parentExpenseNumberTemp;
                        childExpenseAccountNumberTemp = String(+parentExpenseNumberTemp.substr(2) + 1);
                        childExpenseAccountNumberTemp = 'W2' + childExpenseAccountNumberTemp;
                        break;
                    case 'C2C':
                        parentExpenseNumberTemp = this.currentHighestC2CAccNum ? String(+this.currentHighestC2CAccNum.substr(2) + 1) : '1';
                        parentExpenseNumberTemp = 'CC' + parentExpenseNumberTemp;
                        childExpenseAccountNumberTemp = String(+parentExpenseNumberTemp.substr(2) + 1);
                        childExpenseAccountNumberTemp = 'CC' + childExpenseAccountNumberTemp;
                        break;
                    default:
                        break;
                }

                isExpenseParentNew = parentExpenseAccount['qb_status'] == 'temp' && parentExpenseAccount['relation_type'] == 'parent';

            }

            const accountData: any = {
                childIncomeAccountName: this.newIncomeAccountObj.newConsultantName ? this.newIncomeAccountObj.newConsultantName : '',
                childIncomeAccountNumber: childIncomeAccountNumberTemp,
                parentIncomeAccountName: parentIncomeAccount && parentIncomeAccount['full_name'] || '',
                parentIncomeAccountNumber: parentIncomeNumberTemp,
                isIncomeParentNew: isIncomeParentNew,
                childExpenseAccountName: this.newExpenseAccountObj.newConsultantName ? this.newExpenseAccountObj.newConsultantName : '',
                childExpenseAccountNumber: childExpenseAccountNumberTemp,
                parentExpenseAccountName: parentExpenseAccount && parentExpenseAccount['full_name'] || '',
                parentExpenseAccountNumber: parentExpenseNumberTemp,
                isExpenseParentNew: isExpenseParentNew,
                itemType: this.selectedRecord['CandidateType'] != '' ? this.selectedRecord['CandidateType'] : '',
                consultantId: this.selectedRecord['ConsultantID']
            };

            /* CREATE CUSTOMER JOB DATA */
            const customerNameArray = this.newCustomerObj.newConsultantName.split(' ');
            let customerFirstName = '';
            let customerLastName = '';
            let isCustomerNew = false;
            switch (customerNameArray.length) {
                case 1:
                    customerFirstName = customerNameArray[0];
                    break;
                case 2:
                    customerFirstName = customerNameArray[0];
                    customerLastName = customerNameArray[1].slice(0, customerNameArray[1].indexOf('-'));
                    break;
                case 3:
                    customerFirstName = customerNameArray[0];
                    customerLastName = customerNameArray[2].slice(0, customerNameArray[2].indexOf('-'));
                    break;
            }

            if (parentCustomer['ListID'] != null && parentCustomer['ListID'] != '') {
                isCustomerNew = false;
            } else {
                isCustomerNew = parentCustomer['qb_status'] == 'temp' && parentCustomer['type'] == 'customer';

            }

            const customerData: any = {
                name: this.newCustomerObj.newConsultantName ? this.newCustomerObj.newConsultantName : '',
                firstName: customerFirstName,
                lastName: customerLastName,
                companyName: this.selectedRecord['CompanyName'] ? this.selectedRecord['CompanyName'] : '',
                phone: this.selectedRecord['MainPhone'] ? this.selectedRecord['MainPhone'] : '',
                email: this.selectedRecord['MainEmail'] ? this.selectedRecord['MainEmail'] : '',
                contactName: this.newCustomerObj.newConsultantName ? this.newCustomerObj.newConsultantName : '',
                addr1: this.selectedRecord['address_one'] ? this.selectedRecord['address_one'] : '',
                addr2: this.selectedRecord['address_two'] ? this.selectedRecord['address_two'] : '',
                city: this.selectedRecord['city'] ? this.selectedRecord['city'] : '',
                state: this.selectedRecord['state'] ? this.selectedRecord['state'] : '',
                country: '',
                postalCode: this.selectedRecord['zip_code'] ? this.selectedRecord['zip_code'] : '',
                parentCustomerName: parentCustomer && parentCustomer.FullName || '',
                isCustomerNew: isCustomerNew,
                consultantId: this.selectedRecord['ConsultantID']
            };

            /* CREATE VENDOR DATA */
            const vendorData: any = {
                name: this.newVendorsObj.newConsultantName ? this.newVendorsObj.newConsultantName : '',
                firstName: '',
                lastName: '',
                companyName: this.selectedRecord['CompanyName'] != '' ? this.selectedRecord['CompanyName'] : '',
                phone: this.selectedRecord['MainPhone'] != '' ? this.selectedRecord['MainPhone'] : '',
                email: this.selectedRecord['MainEmail'] != '' ? this.selectedRecord['MainEmail'] : '',
                addr1: this.selectedRecord['address_one'] != '' ? this.selectedRecord['address_one'] : '',
                addr2: this.selectedRecord['address_two'] != '' ? this.selectedRecord['address_two'] : '',
                city: this.selectedRecord['city'] != '' ? this.selectedRecord['city'] : '',
                state: this.selectedRecord['state'] != '' ? this.selectedRecord['state'] : '',
                country: '',
                postalCode: this.selectedRecord['zip_code'] != '' ? this.selectedRecord['zip_code'] : '',
                vendorType: this.selectedRecord['CandidateType'] != '' ? this.selectedRecord['CandidateType'] : '',
                paymentTerm: this.selectedRecord['payment_terms'] != '' ? this.selectedRecord['payment_terms'] : '',
                printNameOnCheck: this.selectedRecord['PrintNameOnCheck'] != '' ? this.selectedRecord['PrintNameOnCheck'] : '',
                vendorTaxId: this.selectedRecord['VendorTaxID'] != '' ? this.selectedRecord['VendorTaxID'] : '',
                vendorEligible: 'true',
                isVendorNew: false,
                consultantId: this.selectedRecord['ConsultantID']
            };

            /* CREATE ITEM DATA */
            let incomeAccountFullName = '';
            let expenseAccountFullName = '';
            let vendorFullName = '';

            if (accountData.isIncomeParentNew) {
                incomeAccountFullName = accountData.parentIncomeAccountName ? 'Services:Consulting Services:' + accountData.parentIncomeAccountName + ':' + accountData.childIncomeAccountName : '';
            } else {
                incomeAccountFullName = accountData.parentIncomeAccountName ? accountData.parentIncomeAccountName + ':' + accountData.childIncomeAccountName : '';
            }

            if (accountData.isExpenseParentNew) {
                if (CandidateType == 'W2') {
                    expenseAccountFullName = accountData.parentExpenseAccountName ? 'W2 Consultants:' + accountData.parentExpenseAccountName + ':' + accountData.childExpenseAccountName : '';
                } else {
                    expenseAccountFullName = accountData.parentExpenseAccountName ? 'Cost of Goods Sold:Consulting Services - Expense:' + accountData.parentExpenseAccountName + ':' + accountData.childExpenseAccountName : '';
                }
            } else {
                expenseAccountFullName = accountData.parentExpenseAccountName ? accountData.parentExpenseAccountName + ':' + accountData.childExpenseAccountName : '';
            }
            // expenseAccountFullName = accountData.parentExpenseAccountName ? accountData.parentExpenseAccountName+":"+accountData.childExpenseAccountName : '';
            // incomeAccountFullName = accountData.parentIncomeAccountName ? accountData.parentIncomeAccountName+":"+accountData.childIncomeAccountName : '';
            if (CandidateType) {
                if (CandidateType != 'W2') {
                    vendorFullName = vendorData.name;
                }
            }
            let isParentItemNew = false;
            if (parentClient['ListID'] != null && parentClient['ListID'] != '') {
                isParentItemNew = false;
            } else {
                isParentItemNew = parentClient['pulse_status'] == 'temp' && parentClient['db_type'] == 'parent';

            }
            debugger;
            const itemData: any = {
                name: this.newConsultantObj.newConsultantName ? this.newConsultantObj.newConsultantName : '',
                type: 'Service',
                parentFullName: parentClient && parentClient.Name || '',
                incomeAccountFullName: incomeAccountFullName,
                expenseAccountFullName: expenseAccountFullName,
                vendorFullName: vendorFullName,
                startDate: this.selectedRecord['StartDate'] != '' ? this.selectedRecord['StartDate'] : '',
                endDate: this.selectedRecord['EndDate'] != '' ? this.selectedRecord['EndDate'] : '',
                salesPrice: this.selectedRecord['SalesPrice'] != '' ? this.selectedRecord['SalesPrice'] : '',
                purchaseCost: this.selectedRecord['Cost'] != '' ? this.selectedRecord['Cost'] : '',
                jobStatus: this.selectedRecord['CandidateType'] != '' ? this.selectedRecord['CandidateType'] : '',
                payType: '',
                gpAfterAllFees: this.selectedRecord['GPAfterAllFees'] != '' ? this.selectedRecord['GPAfterAllFees'] : '',
                AEName: this.selectedRecord['AEName'] != '' ? this.selectedRecord['AEName'] : '',
                AECommDollar: this.selectedRecord['AEComm'] != '' ? this.selectedRecord['AEComm'] : '',
                AERevPercent: '50',
                RecName: this.selectedRecord['RecName'] != '' ? this.selectedRecord['RecName'] : '',
                RecCommDollar: this.selectedRecord['RecComm'] != '' ? this.selectedRecord['RecComm'] : '',
                RecRevPercent: '50',
                OtherName: this.selectedRecord['OtherName'] != '' ? this.selectedRecord['OtherName'] : '',
                OtherCommDollar: this.selectedRecord['ORComm'] != '' ? this.selectedRecord['ORComm'] : '',
                Source: this.selectedRecord['Source'] != '' ? this.selectedRecord['Source'] : '',
                ClientDiscountPercent: this.selectedRecord['ClientDiscount'] != '' ? this.selectedRecord['ClientDiscount'] : '',
                isParentNew: isParentItemNew,
                consultantId: this.selectedRecord['ConsultantID']
            };

            console.log('Account Data==>', accountData);
            console.log('Customer Data==>', customerData);
            console.log('Vendor Data==>', vendorData);
            console.log('Item Data==>', itemData);
           // return;
            // console.log(accountData);
            /*let childItemName = this.newConsultantObj.newConsultantName;
            let parentItemName = parentClient['FullName'];
            let accountNumber = '';
            let accountType = '';
            let itemType = itemSelected.CandidateType;

            accountData.childItemName = this.newConsultantObj.newConsultantName*/

            /*this.qbIntegrationService.createAccountInQB(accountData)
                .subscribe((response) => {
                    console.log(response);

                    if (response.error_flag == 0) {
                        this.messages.push("Accounts added into the Database.");
                    } else {
                        this.messages.push("Accounts failed to add into the Database.");
                    }
                });*/

            this.qbIntegrationService.addAccountTest(accountData)
                .subscribe((response) => {
                    console.log(response);

                    if (response.error_flag == 0) {
                        this.messages.push('Accounts added into the Database.');
                    } else {
                        this.messages.push('Accounts failed to add into the Database.');
                    }
                });


            this.qbIntegrationService.createCustomerInQb(customerData)
                .subscribe((response) => {
                    console.log(response);

                    if (response.error_flag == 0) {
                        this.messages.push('Customer added into the Database.');
                    } else {
                        this.messages.push('Customer failed to add into the Database.');
                    }
                });

            if (this.selectedRecord.CandidateType == 'C2C' || this.selectedRecord.CandidateType == 'IC') {
                this.qbIntegrationService.createVendorInQb(vendorData)
                    .subscribe((response) => {
                        console.log(response);

                        if (response.error_flag == 0) {
                            this.messages.push('Vendor added into the Database.');
                        } else {
                            this.messages.push('Vendor failed to add into the Database.');
                        }
                    });
            }

            this.qbIntegrationService.createItemInQb(itemData)
                .subscribe((response) => {
                    console.log(response);
                    console.log(response.error_flag);
                    // this.fetchGridData();
                    if (response.error_flag == 0) {
                        this.messages.push('Item added into the Database.');

                        const swalData = {
                            title: 'Success',
                            message: this.newConsultantObj.newConsultantName + ' Item added into the Database.',
                            type: 'success',
                            info: 'Please run the Web Connector'
                        };

                        this.swalService.success(swalData);

                    } else {
                        this.messages.push('Item failed to add into the Database.');

                        const swalData = {
                            title: 'Invalid Credential',
                            message: response['message'] || 'Invalid Credential',
                            info: response['error'] || 'Please check email & password'
                        };

                        this.swalService.error(swalData);
                    }
                });

            // return false;
        } else {
            console.log('Please select atleast one item!!!');
        }
        this.resetForm();
    }

    fetchCycles() {
        if (!this.payrollDataFilter.period_type) {
            return;
        }
        this.payrollService.fetchCycles(this.payrollDataFilter.period_type).subscribe(response => {
            console.log('Pay Periods==>', response);
            this.payrollFilterValues.period = response && response[0] ? response[0] : [];
            // this.payPeriods = response && response[0] ? response[0] : [];
        }, error => {
            console.log('error while retrieving cycles', error);
        });
    }

    /*this.onClientValueChange = onClientValueChange() {
        console.log();
    }*/

    public form_fieldDataChanged(e) {
        console.log(e);
    }

    public addCustomClientName = (data) => {
        const newItem = data.text;
        this.qbConsultantsNames.push(newItem);
        console.log(this.qbConsultantsNames);
    }

    public openParentItemPopUp = () => {
        this.newParentItemPopUp = true;
    }
    public openParentIncomePopUp = () => {
        this.newParentIncomePopUp = true;
    }
    public openParentExpensePopUp = () => {
        this.newParentExpenseopUp = true;
    }
    public openParentCustomerPopUp = () => {
        this.newParentCustomerPopUp = true;
    }
    public openParentVendorPopUp = () => {
        this.newParentVendorPopUp = true;
    }

    public cancelNewItemPopUp() {
        this.newParentItemPopUp = false;
        this.newParentIncomePopUp = false;
        this.newParentExpenseopUp = false;
        this.newParentCustomerPopUp = false;
        this.newParentVendorPopUp = false;
    }

    public createTempParentItem() {
        console.log(this.newItemPopupData);
        if (this.newItemPopupData.frmFullName) {
            const newParentdata = {
                name: this.newItemPopupData.frmFullName
            };

            this.qbIntegrationService.createTempParentItem(newParentdata)
                .subscribe((response) => {
                    console.log(response);
                    if (response.error_flag == 0) {
                        this.newParentItemPopUp = false;
                    }
                });
        }
    }

    public createTempIncomeAccount() {
        console.log(this.newIncomePopupData);
        if (this.newIncomePopupData.frmFullName) {
            const newParentdata = {
                name: this.newIncomePopupData.frmFullName,
                accountType: 'Income'
            };

            this.qbIntegrationService.createTempIncomeAccount(newParentdata)
                .subscribe((response) => {
                    console.log(response);
                    if (response.error_flag == 0) {
                        this.newParentIncomePopUp = false;
                    }
                });
        }
    }

    public createTempExpenseAccount() {
        console.log(this.newExpensePopupData);
        if (this.newExpensePopupData.frmFullName) {
            const newParentdata = {
                name: this.newExpensePopupData.frmFullName,
                accountType: 'CostOfGoodsSold'
            };

            this.qbIntegrationService.createTempExpenseAccount(newParentdata)
                .subscribe((response) => {
                    console.log(response);
                    if (response.error_flag == 0) {
                        this.newParentExpenseopUp = false;
                    }
                });
        }
    }

    public createTempCustomer() {
        console.log(this.newCustomerPopupData);
        if (this.newCustomerPopupData.frmFullName) {
            const newParentdata = {
                name: this.newCustomerPopupData.frmFullName
            };

            this.qbIntegrationService.createTempCustomer(newParentdata)
                .subscribe((response) => {
                    console.log(response);
                    if (response.error_flag == 0) {
                        this.newParentCustomerPopUp = false;
                    }
                });
        }
    }

    public createTempVendor() {
        console.log(this.newVendorPopupData);
        if (this.newVendorPopupData.frmFullName) {
            const newParentdata = {
                name: this.newVendorPopupData.frmFullName
            };

            this.qbIntegrationService.createTempVendor(newParentdata)
                .subscribe((response) => {
                    console.log(response);
                    if (response.error_flag == 0) {
                        this.newParentVendorPopUp = false;
                    }
                });
        }
    }

    public getW2HighestAccountNumber() {
        this.qbIntegrationService.getW2HighestAccountNumber()
            .subscribe((data: any) => {
                console.log('W2AccountNumber==>', data);
                this.currentHighestw2AccNum = data[0]['highest_acc_num'];
            });
    }

    public getC2CHighestAccountNumber() {
        this.qbIntegrationService.getC2CHighestAccountNumber()
            .subscribe((data: any) => {
                console.log('C2CAccountNumber==>', data);
                this.currentHighestC2CAccNum = data[0]['highest_acc_num'];
            });
    }

    resetForm() {
        this.showForm = false;

        this.newConsultantObj.consultantList = [];
        this.newConsultantObj.newConsultantName = '';
        this.newConsultantObj.consultantId = '';


        this.newCustomerObj.consultantList = [];
        this.newCustomerObj.newConsultantName = '';

        this.newIncomeAccountObj.consultantList = [];
        this.newIncomeAccountObj.newConsultantName = '';

        this.newExpenseAccountObj.consultantList = [];
        this.newExpenseAccountObj.newConsultantName = '';

        this.newVendorsObj.consultantList = [];
        this.newVendorsObj.newConsultantName = '';

        this.notFullTimeAmountObj.billRate = 0;
        this.notFullTimeAmountObj.payRate = 0;
        this.notFullTimeAmountObj.discount = 0;

        this.fullTimeAmountObj.salary = 0;
        this.fullTimeAmountObj.feePercent = 0;
        this.fullTimeAmountObj.feeAmount = 0;

    }
}

